// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: twist.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "twist.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ros_protobuf {

namespace {

const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Twist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Twist_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_twist_2eproto() {
  protobuf_AddDesc_twist_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "twist.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3_descriptor_ = file->message_type(0);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::default_instance_,
      Vector3_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _is_default_instance_));
  Twist_descriptor_ = file->message_type(1);
  static const int Twist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Twist, linear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Twist, angular_),
  };
  Twist_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Twist_descriptor_,
      Twist::default_instance_,
      Twist_offsets_,
      -1,
      -1,
      -1,
      sizeof(Twist),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Twist, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Twist, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_twist_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3_descriptor_, &Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Twist_descriptor_, &Twist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_twist_2eproto() {
  delete Vector3::default_instance_;
  delete Vector3_reflection_;
  delete Twist::default_instance_;
  delete Twist_reflection_;
}

void protobuf_AddDesc_twist_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013twist.proto\022\014ros_protobuf\"*\n\007Vector3\022\t"
    "\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"V\n\005Twist"
    "\022%\n\006linear\030\001 \001(\0132\025.ros_protobuf.Vector3\022"
    "&\n\007angular\030\002 \001(\0132\025.ros_protobuf.Vector3b"
    "\006proto3", 167);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "twist.proto", &protobuf_RegisterTypes);
  Vector3::default_instance_ = new Vector3();
  Twist::default_instance_ = new Twist();
  Vector3::default_instance_->InitAsDefaultInstance();
  Twist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_twist_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_twist_2eproto {
  StaticDescriptorInitializer_twist_2eproto() {
    protobuf_AddDesc_twist_2eproto();
  }
} static_descriptor_initializer_twist_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ros_protobuf.Vector3)
}

void Vector3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ros_protobuf.Vector3)
}

void Vector3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:ros_protobuf.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_twist_2eproto();
  return *default_instance_;
}

Vector3* Vector3::default_instance_ = NULL;

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ros_protobuf.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ros_protobuf.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ros_protobuf.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ros_protobuf.Vector3)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:ros_protobuf.Vector3)
}

::google::protobuf::uint8* Vector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros_protobuf.Vector3)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ros_protobuf.Vector3)
  return target;
}

int Vector3::ByteSize() const {
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// optional double x = 1;
void Vector3::clear_x() {
  x_ = 0;
}
 double Vector3::x() const {
  // @@protoc_insertion_point(field_get:ros_protobuf.Vector3.x)
  return x_;
}
 void Vector3::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ros_protobuf.Vector3.x)
}

// optional double y = 2;
void Vector3::clear_y() {
  y_ = 0;
}
 double Vector3::y() const {
  // @@protoc_insertion_point(field_get:ros_protobuf.Vector3.y)
  return y_;
}
 void Vector3::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ros_protobuf.Vector3.y)
}

// optional double z = 3;
void Vector3::clear_z() {
  z_ = 0;
}
 double Vector3::z() const {
  // @@protoc_insertion_point(field_get:ros_protobuf.Vector3.z)
  return z_;
}
 void Vector3::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ros_protobuf.Vector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Twist::kLinearFieldNumber;
const int Twist::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Twist::Twist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ros_protobuf.Twist)
}

void Twist::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  linear_ = const_cast< ::ros_protobuf::Vector3*>(&::ros_protobuf::Vector3::default_instance());
  angular_ = const_cast< ::ros_protobuf::Vector3*>(&::ros_protobuf::Vector3::default_instance());
}

Twist::Twist(const Twist& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ros_protobuf.Twist)
}

void Twist::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  linear_ = NULL;
  angular_ = NULL;
}

Twist::~Twist() {
  // @@protoc_insertion_point(destructor:ros_protobuf.Twist)
  SharedDtor();
}

void Twist::SharedDtor() {
  if (this != default_instance_) {
    delete linear_;
    delete angular_;
  }
}

void Twist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Twist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Twist_descriptor_;
}

const Twist& Twist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_twist_2eproto();
  return *default_instance_;
}

Twist* Twist::default_instance_ = NULL;

Twist* Twist::New(::google::protobuf::Arena* arena) const {
  Twist* n = new Twist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Twist::Clear() {
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) delete linear_;
  linear_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}

bool Twist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ros_protobuf.Twist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ros_protobuf.Vector3 linear = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_angular;
        break;
      }

      // optional .ros_protobuf.Vector3 angular = 2;
      case 2: {
        if (tag == 18) {
         parse_angular:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ros_protobuf.Twist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ros_protobuf.Twist)
  return false;
#undef DO_
}

void Twist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ros_protobuf.Twist)
  // optional .ros_protobuf.Vector3 linear = 1;
  if (this->has_linear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->linear_, output);
  }

  // optional .ros_protobuf.Vector3 angular = 2;
  if (this->has_angular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angular_, output);
  }

  // @@protoc_insertion_point(serialize_end:ros_protobuf.Twist)
}

::google::protobuf::uint8* Twist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros_protobuf.Twist)
  // optional .ros_protobuf.Vector3 linear = 1;
  if (this->has_linear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->linear_, target);
  }

  // optional .ros_protobuf.Vector3 angular = 2;
  if (this->has_angular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->angular_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ros_protobuf.Twist)
  return target;
}

int Twist::ByteSize() const {
  int total_size = 0;

  // optional .ros_protobuf.Vector3 linear = 1;
  if (this->has_linear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_);
  }

  // optional .ros_protobuf.Vector3 angular = 2;
  if (this->has_angular()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Twist::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Twist* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Twist>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Twist::MergeFrom(const Twist& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_linear()) {
    mutable_linear()->::ros_protobuf::Vector3::MergeFrom(from.linear());
  }
  if (from.has_angular()) {
    mutable_angular()->::ros_protobuf::Vector3::MergeFrom(from.angular());
  }
}

void Twist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Twist::CopyFrom(const Twist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twist::IsInitialized() const {

  return true;
}

void Twist::Swap(Twist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Twist::InternalSwap(Twist* other) {
  std::swap(linear_, other->linear_);
  std::swap(angular_, other->angular_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Twist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Twist_descriptor_;
  metadata.reflection = Twist_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Twist

// optional .ros_protobuf.Vector3 linear = 1;
bool Twist::has_linear() const {
  return !_is_default_instance_ && linear_ != NULL;
}
void Twist::clear_linear() {
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) delete linear_;
  linear_ = NULL;
}
const ::ros_protobuf::Vector3& Twist::linear() const {
  // @@protoc_insertion_point(field_get:ros_protobuf.Twist.linear)
  return linear_ != NULL ? *linear_ : *default_instance_->linear_;
}
::ros_protobuf::Vector3* Twist::mutable_linear() {
  
  if (linear_ == NULL) {
    linear_ = new ::ros_protobuf::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:ros_protobuf.Twist.linear)
  return linear_;
}
::ros_protobuf::Vector3* Twist::release_linear() {
  
  ::ros_protobuf::Vector3* temp = linear_;
  linear_ = NULL;
  return temp;
}
void Twist::set_allocated_linear(::ros_protobuf::Vector3* linear) {
  delete linear_;
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ros_protobuf.Twist.linear)
}

// optional .ros_protobuf.Vector3 angular = 2;
bool Twist::has_angular() const {
  return !_is_default_instance_ && angular_ != NULL;
}
void Twist::clear_angular() {
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}
const ::ros_protobuf::Vector3& Twist::angular() const {
  // @@protoc_insertion_point(field_get:ros_protobuf.Twist.angular)
  return angular_ != NULL ? *angular_ : *default_instance_->angular_;
}
::ros_protobuf::Vector3* Twist::mutable_angular() {
  
  if (angular_ == NULL) {
    angular_ = new ::ros_protobuf::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:ros_protobuf.Twist.angular)
  return angular_;
}
::ros_protobuf::Vector3* Twist::release_angular() {
  
  ::ros_protobuf::Vector3* temp = angular_;
  angular_ = NULL;
  return temp;
}
void Twist::set_allocated_angular(::ros_protobuf::Vector3* angular) {
  delete angular_;
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ros_protobuf.Twist.angular)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ros_protobuf

// @@protoc_insertion_point(global_scope)
