// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: twist.proto

#ifndef PROTOBUF_twist_2eproto__INCLUDED
#define PROTOBUF_twist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ros_protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_twist_2eproto();
void protobuf_AssignDesc_twist_2eproto();
void protobuf_ShutdownFile_twist_2eproto();

class Twist;
class Vector3;

// ===================================================================

class Vector3 : public ::google::protobuf::Message {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  void Swap(Vector3* other);

  // implements Message ----------------------------------------------

  inline Vector3* New() const { return New(NULL); }

  Vector3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:ros_protobuf.Vector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_twist_2eproto();
  friend void protobuf_AssignDesc_twist_2eproto();
  friend void protobuf_ShutdownFile_twist_2eproto();

  void InitAsDefaultInstance();
  static Vector3* default_instance_;
};
// -------------------------------------------------------------------

class Twist : public ::google::protobuf::Message {
 public:
  Twist();
  virtual ~Twist();

  Twist(const Twist& from);

  inline Twist& operator=(const Twist& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Twist& default_instance();

  void Swap(Twist* other);

  // implements Message ----------------------------------------------

  inline Twist* New() const { return New(NULL); }

  Twist* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Twist& from);
  void MergeFrom(const Twist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Twist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ros_protobuf.Vector3 linear = 1;
  bool has_linear() const;
  void clear_linear();
  static const int kLinearFieldNumber = 1;
  const ::ros_protobuf::Vector3& linear() const;
  ::ros_protobuf::Vector3* mutable_linear();
  ::ros_protobuf::Vector3* release_linear();
  void set_allocated_linear(::ros_protobuf::Vector3* linear);

  // optional .ros_protobuf.Vector3 angular = 2;
  bool has_angular() const;
  void clear_angular();
  static const int kAngularFieldNumber = 2;
  const ::ros_protobuf::Vector3& angular() const;
  ::ros_protobuf::Vector3* mutable_angular();
  ::ros_protobuf::Vector3* release_angular();
  void set_allocated_angular(::ros_protobuf::Vector3* angular);

  // @@protoc_insertion_point(class_scope:ros_protobuf.Twist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ros_protobuf::Vector3* linear_;
  ::ros_protobuf::Vector3* angular_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_twist_2eproto();
  friend void protobuf_AssignDesc_twist_2eproto();
  friend void protobuf_ShutdownFile_twist_2eproto();

  void InitAsDefaultInstance();
  static Twist* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// optional double x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:ros_protobuf.Vector3.x)
  return x_;
}
inline void Vector3::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ros_protobuf.Vector3.x)
}

// optional double y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:ros_protobuf.Vector3.y)
  return y_;
}
inline void Vector3::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ros_protobuf.Vector3.y)
}

// optional double z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:ros_protobuf.Vector3.z)
  return z_;
}
inline void Vector3::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ros_protobuf.Vector3.z)
}

// -------------------------------------------------------------------

// Twist

// optional .ros_protobuf.Vector3 linear = 1;
inline bool Twist::has_linear() const {
  return !_is_default_instance_ && linear_ != NULL;
}
inline void Twist::clear_linear() {
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) delete linear_;
  linear_ = NULL;
}
inline const ::ros_protobuf::Vector3& Twist::linear() const {
  // @@protoc_insertion_point(field_get:ros_protobuf.Twist.linear)
  return linear_ != NULL ? *linear_ : *default_instance_->linear_;
}
inline ::ros_protobuf::Vector3* Twist::mutable_linear() {
  
  if (linear_ == NULL) {
    linear_ = new ::ros_protobuf::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:ros_protobuf.Twist.linear)
  return linear_;
}
inline ::ros_protobuf::Vector3* Twist::release_linear() {
  
  ::ros_protobuf::Vector3* temp = linear_;
  linear_ = NULL;
  return temp;
}
inline void Twist::set_allocated_linear(::ros_protobuf::Vector3* linear) {
  delete linear_;
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ros_protobuf.Twist.linear)
}

// optional .ros_protobuf.Vector3 angular = 2;
inline bool Twist::has_angular() const {
  return !_is_default_instance_ && angular_ != NULL;
}
inline void Twist::clear_angular() {
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}
inline const ::ros_protobuf::Vector3& Twist::angular() const {
  // @@protoc_insertion_point(field_get:ros_protobuf.Twist.angular)
  return angular_ != NULL ? *angular_ : *default_instance_->angular_;
}
inline ::ros_protobuf::Vector3* Twist::mutable_angular() {
  
  if (angular_ == NULL) {
    angular_ = new ::ros_protobuf::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:ros_protobuf.Twist.angular)
  return angular_;
}
inline ::ros_protobuf::Vector3* Twist::release_angular() {
  
  ::ros_protobuf::Vector3* temp = angular_;
  angular_ = NULL;
  return temp;
}
inline void Twist::set_allocated_angular(::ros_protobuf::Vector3* angular) {
  delete angular_;
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ros_protobuf.Twist.angular)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ros_protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_twist_2eproto__INCLUDED
